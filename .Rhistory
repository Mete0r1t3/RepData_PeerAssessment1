library(dplyr)
head(select(train, 1:5))
?select
View(train)
train <- read.table("~/Data Science//Getting and Cleaning Data/UCI HAR Dataset/train/X_train.txt")
View(train)
colnames(train) <- read.table("~/Data Science//Getting and Cleaning Data//UCI HAR Dataset/train/y_train.txt")
View(train)
colnames(train) <- read.table("~/Data Science//Getting and Cleaning Data//UCI HAR Dataset/activity_labels.txt")
View(train)
colnames(train) <- read.table("~/Data Science//Getting and Cleaning Data//UCI HAR Dataset/features.txt")
View(train)
colnames(train) <- read.ftable("~/Data Science//Getting and Cleaning Data//UCI HAR Dataset/features.txt")
source('~/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
?matrix
data <- c(1,2,3,0,1,4,5,6,0)
a <- matrix(data, nrow=3, ncol=3)
cacheSolve(a)
makeCacheMatrix(a)
cacheSolve(a)
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve()
cacheSolve(makeCacheMatrix())
cacheSolve(makeCacheMatrix(a))
makeCacheMatrix(a)
b <- matrix(c(4,3,3,2),nrow=2,ncol=2)
cacheSolve(makeCacheMatrix(b))
c <- matrix(c(1,2,3,0,4,5,1,0,6),nrow=3,ncol=3)
cacheSolve(makeCacheMatrix(c))
i <- makeCacheMatrix(c)
cacheSolve(i)
cacheSolve(i)
source('~/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(i)
i <- makeCacheMatrix(c)
cacheSolve(i)
cacheSolve(i)
a
solve(a)
c
c <- matrix(c(1,0,1,2,4,0,3,5,6), nrow=3,ncol=3
)
c
solve(c)
source('~/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
i <- makeCacheMatrix(c)
cacheSolve(i)
cacheSolve(i)
b
j <- makeCacheMatrix(b)
cacheSolve(j)
cacheSolve(j)
cacheSolve(i)
d <- matrix(c(1,3,2,4),nrow=2,ncol=2)
d_c <- makeCacheMatrix(d)
cacheSolve(d_c)
cacheSolve(d_c)
cacheSolve(j)
cacheSolve(i)
source('~/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(i)
cacheSolve(j)
j
j$get()
j$getInv()
x <- matrix(c(2,1,6,3), nrow=2, ncol=2)
solve(x)
cacheSolve(makeCacheMatrix(x))
source('~/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(makeCacheMatrix(x))
source('~/Data Science/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(makeCacheMatrix(x))
?solve
swirl()
library(swirl)
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(x) x[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
viewinfo(flags)
viewinfo()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, n=10)
tail(plants, n=15)
summary(plants)
table(plants$Active_Growth_Period)
str(planta)
str(plants)
swirl()
?sample
sample(1:6, 4, replace=T)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS,)
sample(c(0,1), 100, replace=T, prob=c(0.3, 0.7))
flips<-sample(c(0,1), 100, replace=T, prob=c(0.3, 0.7))
flips<-sample(c(0,1), 100, replace = TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
rbinom(100, size=1, prob=0.7)
flips2<-rbinom(1,100,0.7)
flips2<-rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5,10)
my_pois<-rep(100, rpois(5,10))
my_pois<-replicate(100, rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(Speed=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
?par
plot(cars, col=2)
plot(cars, xlim=c(10,15))
?points
plot(cars, pch=2)
library(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5,2)
set.seed(10)
x<-rep(0:1,each=5)
e<-rnorm(10,0,20)
y<- 0.5 + 2*x + e
y
x
e
?rnorm
rm(list=ls())
ls()
q()
?qunif
qunif(0.75)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
install.packages("swirl")
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
install_from_swirl("Getting and Cleaning Data")
swirl()
q()
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[,1:5])
q()
a1 <- 5
a1 <- 13
a2 <- 13
a1 <- 5
a <- c(5,13)
rbind(1:3,1:3)
concat(1:3,1:3)
c(1:3,1)
c(1,1:3)
a_n <- function(n){
if(n == 1 || n == 2){
a[[n]]
} elsif(length(a) >= n) {
a[[n]]
} else {
a[n] <- 5(a_n(n-1)) - 6(a_n(n-2))
a[n]
}
}
a_n <- function(n){
if(n == 1 || n == 2){
a[n]
} elsif(length(a) >= n) {
a[n]
} else {
a[n] <- 5(a_n(n-1)) - 6(a_n(n-2))
a[n]
}
}
a_n <- function(n){
if(n == 1 || n == 2){
a[n]
} else if(length(a) >= n) {
a[n]
} else {
a[n] <- 5(a_n(n-1)) - 6(a_n(n-2))
a[n]
}
}
a_n(3)
a_n <- function(n){
if(n == 1 || n == 2){
return a[n]
} else if(length(a) >= n) {
return a[n]
} else {
a[n] <- 5*a_n(n-1) - 6*a_n(n-2)
return a[n]
}
}
a_n <- function(n){
if(n == 1 || n == 2){
a[n]
} else if(length(a) >= n) {
a[n]
} else {
a[n] <- 5*a_n(n-1) - 6*a_n(n-2)
return a[n]
}
}
a_n <- function(n){
if(n == 1 || n == 2){
a[n]
} else if(length(a) >= n) {
a[n]
} else {
a[n] <- 5*a_n(n-1) - 6*a_n(n-2)
a[n]
}
}
a_n(3)
a_n <- function(n){
if(n == 1 || n == 2){
a[n]
} else if(length(a) >= n) {
a[n]
} else {
a[n] <<- 5*a_n(n-1) - 6*a_n(n-2)
a[n]
}
}
a_n(3)
a_n(5)
a_n(55)
2^55 + 3^55
5^55 - 2^55
2^54 + 5^54
3^54 - 2^54
mad <- function(x){
mean <- mean(x)
y <- abs(mean - x)
mean(y)
}
mad(c(5,9,5,5,7,11))
mad(c(5,6,5,6,8))
mad(c(0.9,0.5,0.3,1.1))
mad <- function(...){
mean <- mean(...)
y <- abs(mean - x)
mean(y)
}
mad <- function(...){
x <- ...
mean <- mean(x)
y <- abs(mean - x)
mean(y)
}
mad(c(0.9,0.5,0.3,1.1))
mad(0.9,0.5,0.3,1.1)
mad <- function(x){
mean <- mean(x)
y <- abs(mean - x)
mean(y)
}
mad(c(41,38,36,57,43))
mad(c(5,8,11,7,9))
median(c(2,rep.int(4,5), rep.int(6,4), rep.int(8,3)))
median(8,14,18,6,8)
median(c(8,14,18,6,8))
median(c(rep.int(0,4),rep.int(10,3), rep.int(20,5), rep.int(30,3), rep.int(40,2)))
mad <- function(x){
}
mad <- function(x){}
mad <- function(x){
m <- mean(x)
y <- abs(x - m)
mean(y)
}
mad(c(13,0,14,36,18,9))
median(3*c(2,4,3,5))
3.5*3
mean(c(5,6,5,6,9))
install.packages("RMySQL")
fileURL<-https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
data <- download.file(fileURL, "~/Data Science//Getting and Cleaning Data/acs.csv")
data <- read.csv("~/Data Science//Getting and Cleaning Data/acs.csv")
head(data)
acs <- read.csv("~/Data Science//Getting and Cleaning Data/acs.csv")
acs[,AGEP & pwgtp1]
acs[,AGEP~pwgtp1]
acs[,AGEP|pwgtp1]
acs[,c(AGEP,pwgtp1)]
acs[,AGEP
]
acs[,pwgtp1]
acs[,"pwgtp1"]
head(acs[,c("AGEP","pwgtp1")])
head(sqldf("select pwgtp1 from acs where AGEP < 50"))
library(RMySQL)
head(sqldf("select pwgtp1 from acs where AGEP < 50"))
?sqldf
??sqldf
install.packages("sqldf")
head(sqldf("select pwgtp1 from acs where AGEP < 50"))
library(sqldf)
head(sqldf("select pwgtp1 from acs where AGEP < 50"))
sqldf("select distinct pwgtp1 from acs")
nchar("<meta name="Distribution" content="Global" />")
nchar("<meta name='Distribution' content='Global' />")
nchar("<script type='text/javascript'>")
nchar("  })();")
nchar("    			<ul class='sidemenu'>")
nchar("<ul class='sidemenu'>")
data <- read.fwf("~/Data Science//Getting and Cleaning Data/getdata-wksst8110.for")
data <- read.fwf("~/Data Science//Getting and Cleaning Data/getdata-wksst8110.for", c(10, 9, 4, 9,4,9,4,9,4), skip = 3, header = TRUE)
data <- read.fwf(file = "~/Data Science//Getting and Cleaning Data/getdata-wksst8110.for", widths = c(10, 9, 4, 9,4,9,4,9,4), skip = 3, header = TRUE)
data <- read.fwf(file = "~/Data Science//Getting and Cleaning Data/getdata-wksst8110.for", widths = c(10,9,4,9,4,9,4,9,4), skip = 4)
head(data)
data$V4
sum(data$V4)
install.packages("knitr")
install.packages("markdown")
setwd("~/Data Science/Reproducible Research/Week 2/Peer Assessment 1/")
setwd("~/Data Science/Reproducible Research/Week 2/Peer Assessment 1/RepData_PeerAssessment1/")
source('~/Data Science/Reproducible Research/Week 2/Peer Assessment 1/asdf.R')
source('~/Data Science/Reproducible Research/Week 2/Peer Assessment 1/asdf.R')
steps_day
as.numeric(TRUE)
as.numeric(FALSE)
}
##meanStepsByDayType[i] <-
}
dataNoNA <- data
for(i in seq_along(dataNoNA$steps)){
if(is.na(dataNoNA$steps[i])){
dataNoNA$steps[i] <-
meanStepsInt[as.character(dataNoNA$interval[i])]
}
}
meanStepsInt <- tapply(data$steps, data$interval,
function(x) mean(x, na.rm = T))
dataNoNA <- data
for(i in seq_along(dataNoNA$steps)){
if(is.na(dataNoNA$steps[i])){
dataNoNA$steps[i] <-
meanStepsInt[as.character(dataNoNA$interval[i])]
}
}
stepsDayNoNA <- tapply(dataNoNA$steps, dataNoNA$date, sum)
GetDayType <- function(x){
if(x == "Sunday" || x == "Saturday"){
"weekend"
} else {
"weekday"
}
}
dataNoNA$dayType <- factor(sapply(weekdays(as.Date(data$date)), GetDayType))
weekday <- dataNoNA[dataNoNA$dayType == "weekday",]
weekend <- dataNoNA[dataNoNA$dayType == "weekend",]
tapply(dataNoNA$steps, dataNoNA$interval == 5, mean)
tapply(dataNoNA$steps, dataNoNA$interval == 835, mean)
tapply(dataNoNA$steps, dataNoNA$interval, mean)
tapply(dataNoNA$steps, dataNoNA$interval == 835, mean)[TRUE]
tapply(dataNoNA$steps, dataNoNA$interval == 835, mean)["TRUE"]
tapply(dataNoNA$steps, dataNoNA$interval == 835 & dataNoNA$dayType == "weekday", mean)["TRUE"]
meanStepsWeekend <- tapply(weekend$steps, weekend$interval, mean)
meanStepsWeekday <- tapply(weekday$steps, weekday$interval, mean)
meanStepsWeekend
for(i in seq_along(dataNoNA)){
if(dataNoNA$dayType[i] == "weekday"){
dataNoNA$meanStepsByDayType[i] <- meanStepsWeekend[dataNoNA$interval]
}
}
meanStepsWeekend[dataNoNA$interval]
meanStepsWeekend[dataNoNA$interval[1]]
meanStepsWeekend[dataNoNA$interval[3]]
meanStepsWeekend[dataNoNA$interval[5]]
for(i in seq_along(dataNoNA)){
if(dataNoNA$dayType[i] == "weekday"){
dataNoNA$meanStepsByDayType[i] <- meanStepsWeekend[dataNoNA$interval[i]]
}
}
dim(dataNoNA[1])
dim(dataNoNA[[1]])
dim(dataNoNA)[1]
meanStepsWeekend[dataNoNA$interval[i]]
meanStepsWeekend[dataNoNA$interval[1]]
meanStepsWeekend[dataNoNA$interval[3]]
dataNoNA$interval[3]
meanStepsWeekend[as.factor(dataNoNA$interval[3])]
meanStepsWeekend[names(meanStepsWeekend) == dataNoNA$interval[3]]
means <- 1:(dim(dataNoNA)[1])
for(i in 1:length(means)){
if(dataNoNA$dayType = "weekday"){
means[i] <- meanStepsWeekday[names(meanStepsWeekday) ==
dataNoNA$interval[i]]
} else if(dataNoNA$dayType = "weekend"){
means[i] <- meanStepsWeekend[names(meanStepsWeekend) ==
dataNoNA$interval[i]]
}
}
means <- 1:(dim(dataNoNA)[1])
for(i in 1:length(means)){
if(dataNoNA$dayType == "weekday"){
means[i] <- meanStepsWeekday[names(meanStepsWeekday) ==
dataNoNA$interval[i]]
} else if(dataNoNA$dayType == "weekend"){
means[i] <- meanStepsWeekend[names(meanStepsWeekend) ==
dataNoNA$interval[i]]
}
}
View(dataNoNA)
summary(dataNoNA)
